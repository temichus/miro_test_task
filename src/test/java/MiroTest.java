// Generated by Selenium IDE
import com.github.romankh3.image.comparison.ImageComparison;
import com.github.romankh3.image.comparison.ImageComparisonUtil;
import com.github.romankh3.image.comparison.model.ImageComparisonResult;
import com.github.romankh3.image.comparison.model.ImageComparisonState;
import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

import static junit.framework.TestCase.assertTrue;

public class MiroTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  private WebDriverWait wait;
  JavascriptExecutor js;

// ############################ KEYWORDS ####################################
// Can be migrate to some common place to reuse in other test cases

  public WebElement get_element(By locator){
    // Wait for element is visible and return it
    wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
    return driver.findElement(locator);
  }

  public ConfigObj parse_test_config() throws FileNotFoundException{
    // Parse configuration file "test_config.yaml"
    InputStream input = new FileInputStream(new File("test_config.yaml"));
    Yaml yaml = new Yaml(new Constructor(ConfigObj.class));
    ConfigObj object = yaml.load(input);
    return object;
  }

  public void make_screen_shoot(String file_path) throws InterruptedException, IOException {
    // make screenshot
    TimeUnit.SECONDS.sleep(7);
    File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
    FileUtils.copyFile(scrFile, new File(file_path));
  }

  public void crop_head_of_screenshot(String original_file_path, String dest_file_path) throws IOException {
    // crop head of screenshot to make screenshots similar
    BufferedImage originalImgage = ImageIO.read(new File(original_file_path));

    System.out.println("Original Image Dimension: "+originalImgage.getWidth()+"x"+originalImgage.getHeight());

    BufferedImage SubImgage = originalImgage.getSubimage(0, 100, originalImgage.getWidth(), originalImgage.getHeight()-100);
    System.out.println("Cropped Image Dimension: "+SubImgage.getWidth()+"x"+SubImgage.getHeight());

    File outputfile = new File(dest_file_path);
    ImageIO.write(SubImgage, "png", outputfile);

    System.out.println("Image cropped successfully: "+outputfile.getPath());
  }

  public ImageComparisonState compare_images(String image1, String image2){
    // Conpare images by image-comparison lib
    BufferedImage expectedImage = ImageComparisonUtil.readImageFromResources(image1);
    BufferedImage actualImage = ImageComparisonUtil.readImageFromResources(image2);
    File resultDestination = new File( "result.png" );
    ImageComparison imageComparison = new ImageComparison( expectedImage, actualImage, resultDestination );
    ImageComparisonResult imageComparisonResult = imageComparison.compareImages();
    ImageComparisonState imageComparisonState = imageComparisonResult.getImageComparisonState();
    System.out.println(imageComparisonState);
    BufferedImage resultImage = imageComparisonResult.getResult();
    ImageComparisonUtil.saveImage(resultDestination, resultImage);
    return imageComparisonState;
  }

  public void login(String user, String password){
    get_element(By.id("header-login-btn")).click();
    get_element(By.id("email")).clear();
    get_element(By.id("email")).sendKeys(user);
    get_element(By.id("password")).clear();
    get_element(By.id("password")).sendKeys(password);
    get_element(By.cssSelector(".signup__submit")).click();
  }

  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver","chromedriver");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    wait = new WebDriverWait(driver, 10);
  }
  @After
  public void tearDown() {
    driver.quit();
  }

// ######################## TEST CASE ################################################

  @Test
  public void share_board_test() throws IOException, InterruptedException {
    ConfigObj conf_obj = parse_test_config();
    // Test name: full test
    // Step # | name
    // 1 | open  https://miro.com/
    driver.get(conf_obj.url);
    // 2 | login user 1
    login(conf_obj.user1, conf_obj.password1);

    // 3 Create new board
    get_element(By.cssSelector(".dashboard-templates__new-brick > .dashboard-templates__brick-image")).click();
     get_element(By.cssSelector(".rtb-btn--primary:nth-child(1)")).click();
    get_element(By.cssSelector(".picker_leftMenu_item:nth-child(2) > .btn"));
    {
      WebElement element = get_element(By.cssSelector(".rtb-modal-close__icon"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).clickAndHold().perform();
    }
    {
      WebElement element = get_element(By.cssSelector(".pickerContainer"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).release().perform();
    }

    // 4 | Create STICKER hello
    get_element(By.cssSelector(".AT__toolbar--STICKERS")).click();
    get_element(By.cssSelector(".retinaSupport")).click();
    {
      WebElement element = get_element(By.cssSelector(".ql-editor"));
      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = 'hello'}", element);
    }
    get_element(By.cssSelector(".toolbar__item--cursor")).click();

    // 5 | Rename board and  board with user 2
    get_element(By.cssSelector(".board-top-share-button:nth-child(1) #share-board-button")).click();
    get_element(By.cssSelector(".rtb-modal-container__content")).click();
    get_element(By.cssSelector(".rtb-input")).clear();
    get_element(By.cssSelector(".rtb-input")).sendKeys("board");
    get_element(By.cssSelector(".rtb-input")).sendKeys(Keys.ENTER);
    get_element(By.cssSelector(".email-input__input")).sendKeys(conf_obj.user2);
    get_element(By.cssSelector(".email-input__input")).sendKeys(Keys.ENTER);
    get_element(By.cssSelector(".rtb-btn--medium:nth-child(1)")).click();
    get_element(By.cssSelector(".rtb-btn--small:nth-child(1)")).click();

    // 6 | Prepare board view for screenshot
    get_element(By.cssSelector(".mini-map__value")).click();
    get_element(By.cssSelector(".mini-map__buttons > .svg-button:nth-child(4)")).click();
    get_element(By.cssSelector(".svg-button--active")).click();
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }

    // 7 | make a screenshot
    String screen1 = "screenshot1.png";
    make_screen_shoot(screen1);

    // 8 | logout
    get_element(By.cssSelector(".board-top-left-panel__dashboard")).click();
    get_element(By.cssSelector("user-profile:nth-child(4) img")).click();
    get_element(By.cssSelector(".user-profile__buttons:nth-child(3) > .user-profile__button-item:nth-child(2) > span")).click();


    // 9 | login user 2
    login(conf_obj.user2, conf_obj.password2);

    // 10 | go to shared board
    get_element(By.cssSelector(".dashboard-templates__new-brick > .dashboard-templates__brick-image"));
    TimeUnit.SECONDS.sleep(1);
    driver.findElement(By.cssSelector(".board-brick__preview__overlay")).click();

    // 11 | prepare board view for screenshot
    get_element(By.cssSelector(".mini-map__value")).click();
    get_element(By.cssSelector(".mini-map__buttons > .svg-button:nth-child(4)")).click();
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }

    // 12 | make a screenshot
    String screen2 = "screenshot2.png";
    make_screen_shoot(screen2);

    // 13 | logout
    get_element(By.cssSelector(".board-top-left-panel__dashboard")).click();
    get_element(By.cssSelector("user-profile:nth-child(4) img")).click();
    get_element(By.cssSelector(".user-profile__buttons:nth-child(3) > .user-profile__button-item")).click();


    // 14 | login user 1
    login(conf_obj.user1, conf_obj.password1);

    // 15 | delete board
    get_element(By.cssSelector(".dashboard-templates__new-brick > .dashboard-templates__brick-image"));
    TimeUnit.SECONDS.sleep(1);
    driver.findElement(By.cssSelector(".block > use")).click();
    get_element(By.cssSelector(".btn:nth-child(9)")).click();
    get_element(By.cssSelector(".rtb-btn--primary:nth-child(1)")).click();

    // 16 log out
    get_element(By.cssSelector("user-profile:nth-child(4) img")).click();
    get_element(By.cssSelector(".user-profile__buttons:nth-child(3) > .user-profile__button-item:nth-child(2) > span")).click();

    // 17 Crop and compare images
    String crop = "crop";
    crop_head_of_screenshot(screen1, crop.concat(screen1));
    crop_head_of_screenshot(screen2, crop.concat(screen2));
    ImageComparisonState result = compare_images(crop.concat(screen1), crop.concat(screen2));
    assertTrue(result == ImageComparisonState.MATCH);

  }
}
